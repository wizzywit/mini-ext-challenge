import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {RootState} from '../../app/store';
import {fetchRecord, IResponse} from './airtableAPI';
import {logout} from "../auth/authSlice";

export interface AirtableState {
    response: IResponse[];
    status: 'idle' | 'loading' | 'failed';
    error?: any
}

const initialState: AirtableState = {
    response: [],
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAsync('user-name'))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk(
    'airtable/fetchStudent',
    async (name: string) => {
        // The value we return becomes the `fulfilled` action payload
        return await fetchRecord(name);
    }
);

export const airtableSlice = createSlice({
    name: 'airtable',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.response = [...action.payload];
            })
            .addCase(fetchAsync.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.payload;
            })
            .addCase(logout, (state) => {
                state.status = 'idle';
                state.response = [];
                state.error = null;
            });
    },
});

export const selectStatus = (state: RootState) => state.airtable.status;
export const selectResponse = (state: RootState) => state.airtable.response;
export const selectError = (state: RootState) => state.airtable.error;


export default airtableSlice.reducer;
